--[[--
   ImportF4A2D.fuse

  f4a2d importer

--]]--


FuRegisterClass('ImportF4A2D', CT_Tool, {
    REGS_Category = "Fuses",
    REGS_OpIconString = '',
    REGS_OpDescription = 'f4a2d importer',
    REG_OpNoMask = true,
    REG_NoBlendCtrls = true,
    REG_NoObjMatCtrls = true,
    REG_NoMotionBlurCtrls = true,
    REG_Source_GlobalCtrls = true,
    REG_Source_SizeCtrls = true,
    REG_Source_AspectCtrls = true,
    REG_Source_DepthCtrls = true,
    REG_TimeVariant = true,
    REG_Fuse_NoEdit = false,
    REG_Fuse_NoReload = false,
})


function Create()
    InFile = self:AddInput('File', 'file', {
        LINKID_DataType="Text",
        INPID_InputControl = "FileControl",
        FC_ClipBrowse = false,
        FCS_FilterString = "F4A2D (*.f4a2d)|*.f4a2d|"
    })

    OutImage = self:AddOutput("Output", "Output", {
        LINKID_DataType = "Image",
        LINK_Main = 1,
    })
end

function GetImageAttributes(req, comp, width, height)
    local imageAttributes = {
        IMG_Document = comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = width,
        IMG_Height = height,
        IMG_XScale = 1,
		IMG_YScale = 1,
		IMAT_OriginalWidth = width,
		IMAT_OriginalHeight = height,
        IMG_Depth = 4,
		-- IMG_Quality = not req:IsQuick(),
		-- IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    }

    return imageAttributes
end

function DrawPlaceholder(req, comp)
    local width = 2
    local height = 2
    local imageAttributes = GetImageAttributes(req, comp, width, height)
    local img = Image(imageAttributes)

    local pixel = Pixel({R = 1, G = 0, B = 0, A = 1})

    for y = 0, height - 1 do
        if self.Status ~= "OK" then
            break
        end

        for x = 0, width - 1 do
            img:SetPixel(x, y, pixel)
        end
    end

    return img
end

function BinToFloat32(bin)
    local sig = bin:byte(3) % 0x80 * 0x10000 + bin:byte(2) * 0x100 + bin:byte(1)
    local exp = bin:byte(4) % 0x80 * 2 + math.floor(bin:byte(3) / 0x80) - 0x7F
    if exp == 0x7F then return 0 end
    return math.ldexp(math.ldexp(sig, -23) + 1, exp) * (bin:byte(4) < 0x80 and 1 or -1)
  end

function Process(req)
    print(_VERSION)

    local filePath = InFile:GetValue(req).Value

    if filePath == nil or filePath == "" then
        local img = DrawPlaceholder()
        OutImage:Set(req, img)
        return
    end

    local file, err = io.open(filePath, "rb")
    if file then
        local width = 0
        for i = 1, 4 do
            width = width + string.byte(file:read(1)) * 256^(i - 1)
        end

        local file_length = file:seek("end")
        local height = (file_length - 4) / (4 * 4 * width)

        local pixels = {}

        file:seek("set", 4)

        for i = 1, height do
            local row = {}
            for j = 1, width do
                local pixel = {}
                for channel = 1, 4 do
                    local channel_data = file:read(4)
                    local channel_value = BinToFloat32(channel_data)
                    table.insert(pixel, channel_value)
                end
                table.insert(row, pixel)
            end
            table.insert(pixels, row)
        end
        
        file:close()

        local imageAttributes = GetImageAttributes(req, comp, width, height)
        local img = Image(imageAttributes)

        for y = 0, height - 1 do
            if self.Status ~= "OK" then
                break
            end
    
            for x = 0, width - 1 do
                local p = Pixel()
                p.R = pixels[y+1][x+1][1]
                p.G = pixels[y+1][x+1][2]
                p.B = pixels[y+1][x+1][3]
                p.A = pixels[y+1][x+1][4]
                img:SetPixel(x, y, p)
            end
        end

        OutImage:Set(req, img)
        return

    else
        print("Error opening file: " .. err)
        local img = DrawPlaceholder()
        OutImage:Set(req, img)
        return
    end
end